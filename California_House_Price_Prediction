{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nfrom six.moves import urllib\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-20T09:29:00.932542Z","iopub.execute_input":"2024-07-20T09:29:00.932952Z","iopub.status.idle":"2024-07-20T09:29:04.388172Z","shell.execute_reply.started":"2024-07-20T09:29:00.932920Z","shell.execute_reply":"2024-07-20T09:29:04.386860Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import sklearn.datasets\n\ndata= sklearn.datasets.fetch_california_housing()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:29:15.187879Z","iopub.execute_input":"2024-07-20T09:29:15.188453Z","iopub.status.idle":"2024-07-20T09:29:16.546624Z","shell.execute_reply.started":"2024-07-20T09:29:15.188420Z","shell.execute_reply":"2024-07-20T09:29:16.545554Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(data.DESCR)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:30:37.165916Z","iopub.execute_input":"2024-07-20T09:30:37.166356Z","iopub.status.idle":"2024-07-20T09:30:37.172434Z","shell.execute_reply.started":"2024-07-20T09:30:37.166321Z","shell.execute_reply":"2024-07-20T09:30:37.171198Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(data)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:31:03.180590Z","iopub.execute_input":"2024-07-20T09:31:03.180973Z","iopub.status.idle":"2024-07-20T09:31:03.187649Z","shell.execute_reply.started":"2024-07-20T09:31:03.180946Z","shell.execute_reply":"2024-07-20T09:31:03.186572Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Loading into Pandas DataFrame\n##### This allows for easier manipulation, analysis and visualization of the house price data","metadata":{}},{"cell_type":"code","source":"data_df = pd.DataFrame(data.data, columns = data.feature_names)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:32:20.832365Z","iopub.execute_input":"2024-07-20T09:32:20.832843Z","iopub.status.idle":"2024-07-20T09:32:20.840705Z","shell.execute_reply.started":"2024-07-20T09:32:20.832809Z","shell.execute_reply":"2024-07-20T09:32:20.839586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:33:48.741670Z","iopub.execute_input":"2024-07-20T09:33:48.742183Z","iopub.status.idle":"2024-07-20T09:33:48.771816Z","shell.execute_reply.started":"2024-07-20T09:33:48.742142Z","shell.execute_reply":"2024-07-20T09:33:48.770567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_df['Price'] = data.target","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:35:08.114461Z","iopub.execute_input":"2024-07-20T09:35:08.115414Z","iopub.status.idle":"2024-07-20T09:35:08.121795Z","shell.execute_reply.started":"2024-07-20T09:35:08.115374Z","shell.execute_reply":"2024-07-20T09:35:08.120581Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:35:33.973634Z","iopub.execute_input":"2024-07-20T09:35:33.974050Z","iopub.status.idle":"2024-07-20T09:35:33.992579Z","shell.execute_reply.started":"2024-07-20T09:35:33.974012Z","shell.execute_reply":"2024-07-20T09:35:33.991261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('The size of Dataframe is: ', data_df.shape)\nprint('-'*60)\nprint('The Column Name, Record Count and Data Types are as follows: ')\ndata_df.info()\nprint('-'*60)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:36:33.358896Z","iopub.execute_input":"2024-07-20T09:36:33.359312Z","iopub.status.idle":"2024-07-20T09:36:33.372652Z","shell.execute_reply.started":"2024-07-20T09:36:33.359279Z","shell.execute_reply":"2024-07-20T09:36:33.371313Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Defining Numerical and Categorical Features:","metadata":{}},{"cell_type":"code","source":"num_feat = [feature for feature in data_df.columns if data_df[feature].dtype != 'O']\ncat_feat = [feature for feature in data_df.columns if data_df[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(num_feat), num_feat))\nprint('\\nWe have {} categorical features : {}'.format(len(cat_feat), cat_feat))","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:39:24.293551Z","iopub.execute_input":"2024-07-20T09:39:24.294730Z","iopub.status.idle":"2024-07-20T09:39:24.301611Z","shell.execute_reply.started":"2024-07-20T09:39:24.294691Z","shell.execute_reply":"2024-07-20T09:39:24.300471Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Let's find missing values","metadata":{}},{"cell_type":"code","source":"total=data_df.isnull().sum().sort_values(ascending=False)\npercent=(data_df.isnull().sum()/data_df.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:41:38.049903Z","iopub.execute_input":"2024-07-20T09:41:38.050318Z","iopub.status.idle":"2024-07-20T09:41:38.069656Z","shell.execute_reply.started":"2024-07-20T09:41:38.050288Z","shell.execute_reply":"2024-07-20T09:41:38.068099Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Correlation Between the Different Features","metadata":{}},{"cell_type":"code","source":"correlation = data_df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:54:11.830099Z","iopub.execute_input":"2024-07-20T09:54:11.830506Z","iopub.status.idle":"2024-07-20T09:54:12.519347Z","shell.execute_reply.started":"2024-07-20T09:54:11.830475Z","shell.execute_reply":"2024-07-20T09:54:12.518325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### No Need to Clean Data and Preprocessing Needed\n\n### Model Building - Feature Matrix (Independent Variables) & Target Variable (Dependent Variable) ","metadata":{}},{"cell_type":"markdown","source":"X = Feature Matrix\ny = Target Variable\n","metadata":{}},{"cell_type":"code","source":"X = data_df.drop(columns = 'Price', axis=1)\ny = data_df['Price']","metadata":{"execution":{"iopub.status.busy":"2024-07-20T09:59:11.998283Z","iopub.execute_input":"2024-07-20T09:59:11.998728Z","iopub.status.idle":"2024-07-20T09:59:12.006095Z","shell.execute_reply.started":"2024-07-20T09:59:11.998695Z","shell.execute_reply":"2024-07-20T09:59:12.004593Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:00:06.078969Z","iopub.execute_input":"2024-07-20T10:00:06.079407Z","iopub.status.idle":"2024-07-20T10:00:06.102217Z","shell.execute_reply.started":"2024-07-20T10:00:06.079375Z","shell.execute_reply":"2024-07-20T10:00:06.100741Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:00:12.110960Z","iopub.execute_input":"2024-07-20T10:00:12.112115Z","iopub.status.idle":"2024-07-20T10:00:12.120271Z","shell.execute_reply.started":"2024-07-20T10:00:12.112060Z","shell.execute_reply":"2024-07-20T10:00:12.119066Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Data Standardization","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:01:40.479459Z","iopub.execute_input":"2024-07-20T10:01:40.480493Z","iopub.status.idle":"2024-07-20T10:01:40.492950Z","shell.execute_reply.started":"2024-07-20T10:01:40.480453Z","shell.execute_reply":"2024-07-20T10:01:40.491665Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"standardized_data = scaler.transform(X)\nstandardized_data","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:02:13.678959Z","iopub.execute_input":"2024-07-20T10:02:13.679368Z","iopub.status.idle":"2024-07-20T10:02:13.691765Z","shell.execute_reply.started":"2024-07-20T10:02:13.679335Z","shell.execute_reply":"2024-07-20T10:02:13.690607Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = standardized_data","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:02:43.027217Z","iopub.execute_input":"2024-07-20T10:02:43.027689Z","iopub.status.idle":"2024-07-20T10:02:43.033413Z","shell.execute_reply.started":"2024-07-20T10:02:43.027653Z","shell.execute_reply":"2024-07-20T10:02:43.032103Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Train-Test Split","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)\nprint('X-shape:', X.shape, 'X-train:', X_train.shape,'X-test:', X_test.shape)\n\nprint('Y-shape:', y.shape,'Y-train:', y_train.shape, 'Y-Test:',y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:06:47.709872Z","iopub.execute_input":"2024-07-20T10:06:47.710350Z","iopub.status.idle":"2024-07-20T10:06:47.720841Z","shell.execute_reply.started":"2024-07-20T10:06:47.710321Z","shell.execute_reply":"2024-07-20T10:06:47.719305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Comparison","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:07:46.637588Z","iopub.execute_input":"2024-07-20T10:07:46.638456Z","iopub.status.idle":"2024-07-20T10:07:47.245579Z","shell.execute_reply.started":"2024-07-20T10:07:46.638414Z","shell.execute_reply":"2024-07-20T10:07:47.244336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = [LinearRegression, SVR, DecisionTreeRegressor, RandomForestRegressor]\nmae_scores = []\nmse_scores = []\nrmse_scores = []\nr2_scores = []\n\nfor model in models:\n    regressor = model().fit(X_train, y_train)\n    y_pred = regressor.predict(X_test)\n    \n    mae_scores.append(mean_absolute_error(y_test, y_pred))\n    mse_scores.append(mean_squared_error(y_test, y_pred))\n    rmse_scores.append(mean_squared_error(y_test, y_pred, squared=False))\n    r2_scores.append(r2_score(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:08:38.350955Z","iopub.execute_input":"2024-07-20T10:08:38.351847Z","iopub.status.idle":"2024-07-20T10:09:06.103945Z","shell.execute_reply.started":"2024-07-20T10:08:38.351804Z","shell.execute_reply":"2024-07-20T10:09:06.102580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"regression_metrics_df = pd.DataFrame({\n    \"Model\": [\"Linear Regression\", \"SVR\", \"Decision Tree Regressor\", \"Random Forest Regressor\"],\n    \"Mean Absolute Error\": mae_scores,\n    \"Mean Squared Error\": mse_scores,\n    \"Root Mean Squared Error\": rmse_scores,\n    \"R-squared (R2)\": r2_scores\n})\n\nregression_metrics_df.set_index('Model', inplace=True)\nregression_metrics_df","metadata":{"execution":{"iopub.status.busy":"2024-07-20T10:09:30.212330Z","iopub.execute_input":"2024-07-20T10:09:30.212738Z","iopub.status.idle":"2024-07-20T10:09:30.229319Z","shell.execute_reply.started":"2024-07-20T10:09:30.212708Z","shell.execute_reply":"2024-07-20T10:09:30.228096Z"},"trusted":true},"execution_count":null,"outputs":[]}]}